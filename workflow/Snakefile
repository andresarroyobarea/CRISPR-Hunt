import glob
import os
import sys
import pandas as pd
from workflow.utils.common import get_samples
from snakemake.utils import min_version

# ---- Snakemake minimal version ---- #
min_version(
    "9.1.1"
)  # Once the pipeline is complete, previous Snakemake versions should be checked.


# ---- Read Config file ---- #
configfile: "config/config.yaml"


# ---- Set up report ---- #
# TODO: This section will cover the generation of Snakemake reports.


# ---- Docker image ---- #
# TODO: A container to define the underlying OS for each job when using the Snakemake workflow with --use-conda --use-singularity.
# Example: container: "docker://continuumio/miniconda3"

# ---- Config and global variables ---- #
# Project name
project = config["project"]

# Samples
samples = config["samples"]
sample_filters = config["sample_filters"]

df_samples = pd.read_csv(samples, sep = "\t")

SAMPLES = get_samples(
    df_samples,
    included = sample_filters.get("included", True),
    batch = sample_filters.get("batch"),
    condition = sample_filters.get("condition")
)

# Conditions
# Filtered samples
df_samples_fil = df_samples[df_samples["sample"].isin(SAMPLES)]

# treated samples
treat_cond = config["parameters"]["mageck_rra_test"]["treat_cond"]

# control samples
ctrl_cond = config["parameters"]["mageck_rra_test"]["ctrl_cond"]

treat_samples = df_samples_fil[df_samples_fil["condition"] == treat_cond].sort_values("replicate")["sample"].tolist()
ctrl_samples = df_samples_fil[df_samples_fil["condition"] == ctrl_cond].sort_values("replicate")["sample"].tolist()

# ---- Design matrix ---- #
# To select filtered samples from the original desing matrix.
design = config["design"]
design_matrix = pd.read_csv(design, sep = "\t")

design_matrix_filt = design_matrix[design_matrix["sample"].isin(SAMPLES)]
design_matrix_filt_path = "resources/design_matrix_filtered.txt"
design_matrix_filt.to_csv(design_matrix_filt_path, sep = "\t", index = False)


# Output paths 
norm_state = config["parameters"]["mageck_count_norm"]["out_prefix"]

# Path to the count table that will be used in RRA or MLE depending on CNV correction
if cnv_correction:
    count_table = "results/mageck_count_norm/norm_cnv_correction.counts.txt"
else:
    count_table = f"results/mageck_count_norm/{norm_state}.counts.txt"


# ---- Load rules ---- #

include: "rules/qc_raw.smk"


if config["parameters"]["trimming"].get("enabled", False):

    include: "rules/trimming.smk"
    include: "rules/qc_trimming.smk"


include: "rules/mageck_count_raw.smk"

include: "rules/mageck_count_norm.smk"


if config["cnv_correction"].get("enabled", False):

    include: "rules/cnv_correction.smk"


for method in config.get("essentiality_methods", []):
    if method == "mageck_rra":

        include: "rules/mageck_rra_test.smk"

    elif method == "mageck_mle":

        include: "rules/mageck_mle_test.smk"
    
    elif method == "bagel2":

        include: "rules/bagel2_fc.smk"
        include: "rules/bagel2_bf.smk"
        include: "rules/bagel2_pr.smk"


include: "rules/summary_report.smk"


# ---- Target rules ---- #
# TODO: This is a initial version to collect the final MAGECK RRA output but it will
# be updated for general purposes.
rule all:
    input:
        expand("results/qc_raw/{sample}/{sample}_fastqc.html", sample=SAMPLES),
        expand("results/qc_trimming/{sample}/{sample}_trimmed_fastqc.html", sample=SAMPLES),
        "results/mageck_rra_test/{project}_sgrna_summary.txt",
        "results/mageck_rra_test/{project}_gene_summary.txt",